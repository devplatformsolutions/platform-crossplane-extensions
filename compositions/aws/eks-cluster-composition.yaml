apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: eks.aws.platform.example.org
  labels:
    provider: aws
spec:
  compositeTypeRef:
    apiVersion: aws.platform.example.org/v1alpha1
    kind: XEKSCluster
  resources:
    # VPC Configuration
    - name: vpc
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPC
        metadata:
          namespace: crossplane-system
          name: eks-vpc
        spec:
          providerConfigRef:
            name: default 
          forProvider:
            cidrBlock: 10.0.0.0/16
            enableDnsSupport: true
            enableDnsHostnames: true
            tags:
              Name: eks-vpc
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "eks-vpc-%s"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region

    # Internet Gateway
    - name: igw
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: InternetGateway
        metadata:
          name: eks-igw
          namespace: crossplane-system
        spec:
          providerConfigRef:
            name: default
          forProvider:
            vpcIdRef:
              name: eks-vpc
      dependsOn:
        - vpc

    # Public Subnets
    - name: publicsubnet1
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: Subnet
        metadata:
          name: eks-public-1
          namespace: crossplane-system
        spec:
          providerConfigRef:
            name: default
          forProvider:
            cidrBlock: 10.0.1.0/24
            mapPublicIpOnLaunch: true
            tags:
              Name: eks-public-1
              "kubernetes.io/role/elb": "1"
            vpcIdRef:
              name: eks-vpc
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region
      dependsOn:
        - vpc

    - name: publicsubnet2
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: Subnet
        metadata:
          name: eks-public-2
          namespace: crossplane-system
        spec:
          providerConfigRef:
            name: default
          forProvider:
            cidrBlock: 10.0.2.0/24
            mapPublicIpOnLaunch: true
            availabilityZone: "b"
            tags:
              Name: eks-public-2
              "kubernetes.io/role/elb": "1"
            vpcIdRef:
              name: eks-vpc
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region
      dependsOn:
        - vpc

    # EKS Cluster Role with Policies
    - name: eksclusterrole
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: Role
        metadata:
          namespace: crossplane-system
          name: eks-cluster-role
        spec:
          providerConfigRef:
            name: default
          forProvider:
            assumeRolePolicy: |
              {
                "Version": "2012-10-17",
                "Statement": [{
                  "Effect": "Allow",
                  "Principal": {"Service": "eks.amazonaws.com"},
                  "Action": "sts:AssumeRole"
                }]
              }
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "eks-cluster-role-%s"

    - name: eks-cluster-policy
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        metadata:
          name: eks-cluster-policy
          namespace: crossplane-system
        spec:
          providerConfigRef:
            name: default
          forProvider:
            policyArn: "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
            roleRef:
              name: eks-cluster-role
      dependsOn:
        - eksclusterrole

    - name: eks-service-policy
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        metadata:
          name: eks-service-policy
          namespace: crossplane-system
        spec:
          providerConfigRef:
            name: default
          forProvider:
            policyArn: "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
            roleRef:
              name: eks-cluster-role
      dependsOn:
        - eksclusterrole

    # EKS Cluster
    - name: ekscluster
      base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: Cluster
        metadata:
          name: eks-cluster
          namespace: crossplane-system
        spec:
          providerConfigRef:
            name: default
          forProvider:
            roleArnRef:
              name: eks-cluster-role
            version: "1.28"
            vpcConfig:
              - endpointPrivateAccess: true
                endpointPublicAccess: true
                subnetRefs:
                  - name: publicsubnet1
                  - name: publicsubnet2
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.version
          toFieldPath: spec.forProvider.version
      dependsOn:
        - eksclusterrole
        - publicsubnet1
        - publicsubnet2

    # Node Group Role with Required Policies
    - name: eksnodegrouprole
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: Role
        metadata:
          name: eks-node-group-role
          namespace: crossplane-system
        spec:
          providerConfigRef:
            name: default
          forProvider:
            assumeRolePolicy: |
              {
                "Version": "2012-10-17",
                "Statement": [{
                  "Effect": "Allow",
                  "Principal": {"Service": "ec2.amazonaws.com"},
                  "Action": "sts:AssumeRole"
                }]
              }
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "eks-node-role-%s"

    # Attach Node Group Policies
    - name: node-worker-policy
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        metadata:
          name: node-worker-policy
          namespace: crossplane-system
        spec:
          providerConfigRef:
            name: default
          forProvider:
            policyArn: "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
            roleRef:
              name: eks-node-group-role
      dependsOn:
        - eksnodegrouprole

    - name: node-cni-policy
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        metadata:
          name: node-cni-policy
          namespace: crossplane-system
        spec:
          providerConfigRef:
            name: default
          forProvider:
            policyArn: "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
            roleRef:
              name: eks-node-group-role
      dependsOn:
        - eksnodegrouprole

    - name: node-ecr-policy
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        metadata:
          name: node-ecr-policy
          namespace: crossplane-system
        spec:
          providerConfigRef:
            name: default
          forProvider:
            policyArn: "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
            roleRef:
              name: eks-node-group-role
      dependsOn:
        - eksnodegrouprole

    - name: node-ssm-policy
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        metadata:
          name: node-ssm-policy
          namespace: crossplane-system
        spec:
          providerConfigRef:
            name: default
          forProvider:
            policyArn: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
            roleRef:
              name: eks-node-group-role
      dependsOn:
        - eksnodegrouprole

    - name: node-cloudwatch-policy
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        metadata:
          name: node-cloudwatch-policy
          namespace: crossplane-system
        spec:
          providerConfigRef:
            name: default
          forProvider:
            policyArn: "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
            roleRef:
              name: eks-node-group-role
      dependsOn:
        - eksnodegrouprole

    # EKS Node Group
    - name: eksnodegroup
      base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: NodeGroup
        metadata:
          name: eks-node-group
          namespace: crossplane-system
        spec:
          providerConfigRef:
            name: default
          forProvider:
            clusterNameRef:
              name: eks-cluster
            nodeRoleArnRef:
              name: eks-node-group-role
            subnetRefs:
              - name: publicsubnet1
              - name: publicsubnet2
            scalingConfig:
              - desiredSize: 2
                maxSize: 4
                minSize: 1
            instanceTypes: ["t3.medium"]
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.nodeCount
          toFieldPath: spec.forProvider.scalingConfig[0].desiredSize
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.nodeSize
          toFieldPath: spec.forProvider.instanceTypes[0]
      dependsOn:
        - ekscluster
        - eksnodegrouprole
        - node-worker-policy
        - node-cni-policy
        - node-ecr-policy
        - node-ssm-policy
        - node-cloudwatch-policy