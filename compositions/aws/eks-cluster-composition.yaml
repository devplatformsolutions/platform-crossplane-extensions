apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: eks.aws.platform.example.org
  labels:
    provider: aws
spec:
  compositeTypeRef:
    apiVersion: aws.platform.example.org/v1alpha1
    kind: XEKSCluster
  mode: Pipeline
  pipeline: 
    - step: go-templating
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            # EKS Cluster Role
            apiVersion: iam.aws.upbound.io/v1beta1
            kind: Role
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: eksclusterrole
              labels:
                provider: aws
                role-target: controlplane
            spec:
              forProvider:
                assumeRolePolicy: |
                  {
                    "Version": "2012-10-17",
                    "Statement": [{
                      "Effect": "Allow",
                      "Principal": {"Service": "eks.amazonaws.com"},
                      "Action": "sts:AssumeRole"
                    }]
                  }
                managedPolicyArns:
                  - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
                  - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
                tags:
                  Name: eks-cluster-role
                  ManagedBy: crossplane
              providerConfigRef:
                name: default


    - step: auto-ready
      functionRef: 
        name: function-auto-ready



  #   # # Security Group
  #   # - name: clustersg
  #   #   base:
  #   #     apiVersion: ec2.aws.upbound.io/v1beta1
  #   #     kind: SecurityGroup
  #   #     metadata:
  #   #       name: eks-cluster-sg
  #   #       namespace: crossplane-system
  #   #     spec:
  #   #       forProvider:
  #   #         vpcIdSelector:
  #   #           matchControllerRef: true
  #   #         ingress:
  #   #           - fromPort: 443
  #   #             toPort: 443
  #   #             protocol: tcp
  #   #             cidrBlocks: ["0.0.0.0/0"]
  #   #         egress:
  #   #           - fromPort: 0
  #   #             toPort: 0
  #   #             protocol: "-1"
  #   #             cidrBlocks: ["0.0.0.0/0"]
  #   #       providerConfigRef:
  #   #         name: default
  #   #   patches:
  #   #     - type: FromCompositeFieldPath
  #   #       fromFieldPath: spec.parameters.region
  #   #       toFieldPath: spec.forProvider.region

  #   # # Cluster Auth
  #   # - name: clusterauth
  #   #   base:
  #   #     apiVersion: eks.aws.upbound.io/v1beta1
  #   #     kind: ClusterAuth
  #   #     metadata:
  #   #       name: eks-cluster-auth
  #   #       namespace: crossplane-system
  #   #     spec:
  #   #       forProvider:
  #   #         clusterNameSelector:
  #   #           matchControllerRef: true
  #   #       writeConnectionSecretToRef:
  #   #         name: eks-cluster-auth
  #   #         namespace: crossplane-system
  #   #       providerConfigRef:
  #   #         name: default

  #   # # Node Group Role
  #   # - name: eksnodegrouprole
  #   #   base:
  #   #     apiVersion: iam.aws.upbound.io/v1beta1
  #   #     kind: Role
  #   #     metadata:
  #   #       name: eks-node-group-role
  #   #       namespace: crossplane-system
  #   #     spec:
  #   #       forProvider:
  #   #         assumeRolePolicy: |
  #   #           {
  #   #             "Version": "2012-10-17",
  #   #             "Statement": [{
  #   #               "Effect": "Allow",
  #   #               "Principal": {"Service": "ec2.amazonaws.com"},
  #   #               "Action": "sts:AssumeRole"
  #   #             }]
  #   #           }
  #   #       providerConfigRef:
  #   #         name: default
  #   #   patches:
  #   #     - type: FromCompositeFieldPath
  #   #       fromFieldPath: metadata.name
  #   #       toFieldPath: metadata.name
  #   #       transforms:
  #   #         - type: string
  #   #           string:
  #   #             fmt: "%s-node-role"

  #   # # Node Group Policies
  #   # - name: node-worker-policy
  #   #   base:
  #   #     apiVersion: iam.aws.upbound.io/v1beta1
  #   #     kind: RolePolicyAttachment
  #   #     metadata:
  #   #       name: node-worker-policy
  #   #       namespace: crossplane-system
  #   #     spec:
  #   #       forProvider:
  #   #         policyArn: "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  #   #         roleSelector:
  #   #           matchControllerRef: true
  #   #       providerConfigRef:
  #   #         name: default

  #   # - name: node-cni-policy
  #   #   base:
  #   #     apiVersion: iam.aws.upbound.io/v1beta1
  #   #     kind: RolePolicyAttachment
  #   #     metadata:
  #   #       name: node-cni-policy
  #   #       namespace: crossplane-system
  #   #     spec:
  #   #       forProvider:
  #   #         policyArn: "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  #   #         roleSelector:
  #   #           matchControllerRef: true
  #   #       providerConfigRef:
  #   #         name: default

  #   # - name: node-ecr-policy
  #   #   base:
  #   #     apiVersion: iam.aws.upbound.io/v1beta1
  #   #     kind: RolePolicyAttachment
  #   #     metadata:
  #   #       name: node-ecr-policy
  #   #       namespace: crossplane-system
  #   #     spec:
  #   #       forProvider:
  #   #         policyArn: "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  #   #         roleSelector:
  #   #           matchControllerRef: true
  #   #       providerConfigRef:
  #   #         name: default

  #   # - name: vpc-resource-controller
  #   #   base:
  #   #     apiVersion: iam.aws.upbound.io/v1beta1
  #   #     kind: RolePolicyAttachment
  #   #     metadata:
  #   #       name: vpc-resource-controller
  #   #       namespace: crossplane-system
  #   #     spec:
  #   #       forProvider:
  #   #         policyArn: "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
  #   #         roleSelector:
  #   #           matchControllerRef: true
  #   #       providerConfigRef:
  #   #         name: default

  #   # # EKS Node Group
  #   # - name: eksnodegroup
  #   #   base:
  #   #     apiVersion: eks.aws.upbound.io/v1beta1
  #   #     kind: NodeGroup
  #   #     metadata:
  #   #       name: eks-node-group
  #   #       namespace: crossplane-system
  #   #     spec:
  #   #       forProvider:
  #   #         clusterNameSelector:
  #   #           matchControllerRef: true
  #   #         nodeRoleArnSelector:
  #   #           matchControllerRef: true
  #   #         subnetIdSelector:
  #   #           matchControllerRef: true
  #   #         scalingConfig:
  #   #           - desiredSize: 2
  #   #             maxSize: 4
  #   #             minSize: 1
  #   #         instanceTypes: ["t3.medium"]
  #   #         tags:
  #   #           Name: eks-node-group
  #   #       providerConfigRef:
  #   #         name: default
  #   #   patches:
  #   #     - type: FromCompositeFieldPath
  #   #       fromFieldPath: spec.parameters.region
  #   #       toFieldPath: spec.forProvider.region
  #   #     - type: FromCompositeFieldPath
  #   #       fromFieldPath: spec.parameters.nodeCount
  #   #       toFieldPath: spec.forProvider.scalingConfig[0].desiredSize
  #   #     - type: FromCompositeFieldPath
  #   #       fromFieldPath: spec.parameters.nodeSize
  #   #       toFieldPath: spec.forProvider.instanceTypes[0]

  #   # # EBS CSI Addon
  #   # - name: ebsaddon
  #   #   base:
  #   #     apiVersion: eks.aws.upbound.io/v1beta1
  #   #     kind: Addon
  #   #     metadata:
  #   #       name: ebs-csi-driver
  #   #       namespace: crossplane-system
  #   #     spec:
  #   #       forProvider:
  #   #         addonName: aws-ebs-csi-driver
  #   #         clusterNameSelector:
  #   #           matchControllerRef: true
  #   #       providerConfigRef:
  #   #         name: default
  #   #   patches:
  #   #     - type: FromCompositeFieldPath
  #   #       fromFieldPath: spec.parameters.region
  #   #       toFieldPath: spec.forProvider.region