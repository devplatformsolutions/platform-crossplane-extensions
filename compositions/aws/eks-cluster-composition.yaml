apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: eks.aws.platform.example.org
  labels:
    provider: aws
spec:
  compositeTypeRef:
    apiVersion: aws.platform.example.org/v1alpha1
    kind: XEKSCluster
  mode: Pipeline
  pipeline: 
    - step: go-templating
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            # VPC
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: VPC
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: vpc
              labels:
                provider: aws
                environment: production
            spec:
              forProvider:
                region: {{ .observed.composite.resource.spec.parameters.region }}
                cidrBlock: {{ .observed.composite.resource.spec.parameters.cidrBlock }}
                enableDnsSupport: true
                enableDnsHostnames: true
                tags:
                  Name: {{ .observed.composite.resource.metadata.name }}-vpc
                  ManagedBy: crossplane

            ---
            # Internet Gateway
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: InternetGateway
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: internet-gateway
              labels:
                provider: aws
                gateway-type: internet
            spec:
              forProvider:
                region: {{ .observed.composite.resource.spec.parameters.region }}
                vpcIdSelector:
                  matchControllerRef: true
                tags:
                  Name: {{ .observed.composite.resource.metadata.name }}-igw

            ---
            # NAT EIPs (One per AZ)
            {{- $azs := list "us-east-1a" "us-east-1b" "us-east-1c" }}
            {{- range $i, $az := $azs }}
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: EIP
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: nat-eip-{{ $az }}
              labels:
                provider: aws
                eip-type: nat
                az: {{ $az }}
            spec:
              forProvider:
                region: {{ $.observed.composite.resource.spec.parameters.region }}
                domain: vpc
                tags:
                  Name: {{ $.observed.composite.resource.metadata.name }}-nat-eip-{{ $az }}
              managementPolicies: ["*"]
            ---
            {{- end }}

            ---
            # Public Subnets
            {{- range $i, $az := $azs }}
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: Subnet
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: public-subnet-{{ $az }}
              labels:
                provider: aws
                subnet-type: public
                az: {{ $az }}
            spec:
              forProvider:
                region: {{ $.observed.composite.resource.spec.parameters.region }}
                cidrBlock: 10.0.{{ add $i 1 }}.0/24
                availabilityZone: {{ $az }}
                mapPublicIpOnLaunch: true
                vpcIdSelector:
                  matchControllerRef: true
                tags:
                  Name: {{ $.observed.composite.resource.metadata.name }}-public-{{ $az }}
                  "kubernetes.io/cluster/{{ $.observed.composite.resource.metadata.name }}": "owned"
                  "kubernetes.io/role/elb": "1"
            ---
            {{- end }}

            ---
            # Private Subnets
            {{- range $i, $az := $azs }}
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: Subnet
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: private-subnet-{{ $az }}
              labels:
                provider: aws
                subnet-type: private
                az: {{ $az }}
            spec:
              forProvider:
                region: {{ $.observed.composite.resource.spec.parameters.region }}
                cidrBlock: 10.0.{{ add $i 10 }}.0/24
                availabilityZone: {{ $az }}
                mapPublicIpOnLaunch: false
                vpcIdSelector:
                  matchControllerRef: true
                tags:
                  Name: {{ $.observed.composite.resource.metadata.name }}-private-{{ $az }}
                  "kubernetes.io/cluster/{{ $.observed.composite.resource.metadata.name }}": "owned"
                  "kubernetes.io/role/internal-elb": "1"
            ---
            {{- end }}

            ---
            # NAT Gateways (One per AZ)
            {{- range $az := $azs }}
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: NATGateway
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: nat-gateway-{{ $az }}
              labels:
                provider: aws
                gateway-type: nat
                az: {{ $az }}
            spec:
              forProvider:
                region: {{ $.observed.composite.resource.spec.parameters.region }}
                allocationIdSelector:
                  matchLabels:
                    az: {{ $az }}
                    eip-type: nat
                subnetIdSelector:
                  matchLabels:
                    az: {{ $az }}
                    subnet-type: public
                tags:
                  Name: {{ $.observed.composite.resource.metadata.name }}-nat-{{ $az }}
            ---
            {{- end }}

            ---
            # Public Route Table
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: RouteTable
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: public-route-table
              labels:
                provider: aws
                table-type: public
            spec:
              forProvider:
                region: {{ .observed.composite.resource.spec.parameters.region }}
                vpcIdSelector:
                  matchControllerRef: true
                tags:
                  Name: {{ .observed.composite.resource.metadata.name }}-public-rt
            ---
            # Public Route to Internet Gateway
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: Route
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: public-route-igw
              labels:
                provider: aws
            spec:
              forProvider:
                region: {{ .observed.composite.resource.spec.parameters.region }}
                routeTableIdSelector:
                  matchLabels:
                    table-type: public
                destinationCidrBlock: 0.0.0.0/0
                gatewayIdSelector:
                  matchLabels:
                    gateway-type: internet
            ---
            # Public Route Table Associations
            {{- range $az := $azs }}
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: RouteTableAssociation
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: public-rt-assoc-{{ $az }}
              labels:
                provider: aws
            spec:
              forProvider:
                region: {{ $.observed.composite.resource.spec.parameters.region }}
                subnetIdSelector:
                  matchLabels:
                    az: {{ $az }}
                    subnet-type: public
                routeTableIdSelector:
                  matchLabels:
                    table-type: public
            ---
            {{- end }}

            ---
            # Private Route Tables (One per AZ)
            {{- range $az := $azs }}
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: RouteTable
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: private-route-table-{{ $az }}
              labels:
                provider: aws
                table-type: private
                az: {{ $az }}
            spec:
              forProvider:
                region: {{ $.observed.composite.resource.spec.parameters.region }}
                vpcIdSelector:
                  matchControllerRef: true
                tags:
                  Name: {{ $.observed.composite.resource.metadata.name }}-private-rt-{{ $az }}
            ---
            # Private Route to NAT Gateway
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: Route
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: private-route-nat-{{ $az }}
              labels:
                provider: aws
            spec:
              forProvider:
                region: {{ $.observed.composite.resource.spec.parameters.region }}
                routeTableIdSelector:
                  matchLabels:
                    az: {{ $az }}
                    table-type: private
                destinationCidrBlock: 0.0.0.0/0
                natGatewayIdSelector:
                  matchLabels:
                    az: {{ $az }}
                    gateway-type: nat
            ---
            # Private Route Table Associations
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: RouteTableAssociation
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: private-rt-assoc-{{ $az }}
              labels:
                provider: aws
            spec:
              forProvider:
                region: {{ $.observed.composite.resource.spec.parameters.region }}
                subnetIdSelector:
                  matchLabels:
                    az: {{ $az }}
                    subnet-type: private
                routeTableIdSelector:
                  matchLabels:
                    az: {{ $az }}
                    table-type: private
            ---
            {{- end }}

            ---
            # EKS Cluster Role
            apiVersion: iam.aws.upbound.io/v1beta1
            kind: Role
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: eksclusterrole
              labels:
                provider: aws
                role-target: controlplane
            spec:
              forProvider:
                assumeRolePolicy: |
                  {
                    "Version": "2012-10-17",
                    "Statement": [{
                      "Effect": "Allow",
                      "Principal": {"Service": "eks.amazonaws.com"},
                      "Action": "sts:AssumeRole"
                    }]
                  }
                managedPolicyArns:
                  - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
                  - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
                tags:
                  Name: {{ .observed.composite.resource.metadata.name }}-cluster-role
                  ManagedBy: crossplane
              providerConfigRef:
                name: default

            --- 
            # EKS node Group Role
            apiVersion: iam.aws.upbound.io/v1beta1
            kind: Role
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: eksnodegrouprole
              labels:
                provider: aws
                role-target: nodegroup
            spec:
              forProvider:
                assumeRolePolicy: |
                  {
                    "Version": "2012-10-17",
                    "Statement": [{
                      "Effect": "Allow",
                      "Principal": {"Service": "ec2.amazonaws.com"},
                      "Action": "sts:AssumeRole"
                    }]
                  }
                managedPolicyArns:
                  - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
                  - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
                  - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
                  - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
                  - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
                tags:
                  Name: {{ .observed.composite.resource.metadata.name }}-node-role
                  ManagedBy: crossplane
              providerConfigRef:
                name: default
              
            ---
            # EKS Cluster
            apiVersion: eks.aws.upbound.io/v1beta2
            kind: Cluster
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: ekscluster
              labels:
                provider: aws
                cluster-type: controlplane
            spec:
              forProvider:
                region: {{ .observed.composite.resource.spec.parameters.region }}
                version: "{{ .observed.composite.resource.spec.parameters.clusterVersion }}"
                roleArnSelector:
                  matchLabels:
                    role-target: controlplane
                vpcConfig:
                  subnetIdSelector:
                    matchControllerRef: true
                accessConfig:
                  authenticationMode: 'API_AND_CONFIG_MAP'
                  bootstrapClusterCreatorAdminPermissions: true
                tags:
                  Name: {{ .observed.composite.resource.metadata.name }}-cluster
                  ManagedBy: crossplane
              providerConfigRef:
                name: default

            ---
            # EKS Node Group
            apiVersion: eks.aws.upbound.io/v1beta2
            kind: NodeGroup
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: eksnodegroup
              labels:
                provider: aws
                cluster-type: nodegroup
            spec:
              forProvider:
                region: {{ .observed.composite.resource.spec.parameters.region }}
                clusterNameSelector:
                  matchControllerRef: true
                nodeRoleArnSelector:
                  matchLabels:
                    role-target: nodegroup
                subnetIdSelector:
                  matchLabels:
                    subnet-type: private
                scalingConfig:
                  desiredSize: 2
                  maxSize: 4
                  minSize: 1
                instanceTypes: ["t3.medium"]
                tags:
                  Name: {{ .observed.composite.resource.metadata.name }}-node-group
                  ManagedBy: crossplane
              providerConfigRef:
                name: default
            
            ---
            # EKS CoreDNS Addon
            apiVersion: eks.aws.upbound.io/v1beta1
            kind: Addon
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: eks-addon-coredns
              labels:
                provider: aws
                addon-type: coredns
            spec:
              forProvider:
                region: {{ .observed.composite.resource.spec.parameters.region }}
                addonName: coredns
                clusterNameSelector:
                  matchControllerRef: true
                configurationValues: |
                  {
                    "resources": {
                      "requests": {
                        "cpu": "100m",
                        "memory": "70Mi"
                      },
                      "limits": {
                        "cpu": "100m",
                        "memory": "170Mi"
                      }
                    },
                    "replicaCount": 1,
                    "tolerations": [
                      {
                        "key": "purpose",
                        "operator": "Equal",
                        "value": "admin",
                        "effect": "NoSchedule"
                      }
                    ]
                  }
              providerConfigRef:
                name: default

            ---
            # EKS Pod Identity Addon
            apiVersion: eks.aws.upbound.io/v1beta1
            kind: Addon
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: eks-addon-pod-identity
              labels:
                provider: aws
                addon-type: eks-pod-identity-agent
            spec:
              forProvider:
                region: {{ .observed.composite.resource.spec.parameters.region }}
                addonName: eks-pod-identity-agent
                clusterNameSelector:
                  matchControllerRef: true
                configurationValues: |
                  {
                    "resources": {
                      "requests": {
                        "cpu": "100m",
                        "memory": "128Mi"
                      },
                      "limits": {
                        "cpu": "200m",
                        "memory": "256Mi"
                      }
                    }
                  }
              providerConfigRef:
                name: default
            
            ---
            # ClusterAuth writes kubeconfig into a Secret
            apiVersion: eks.aws.upbound.io/v1beta1
            kind: ClusterAuth
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: clusterauth
            spec:
              deletionPolicy: Delete
              providerConfigRef:
                name: default
              forProvider:
                region: {{ .observed.composite.resource.spec.parameters.region }}
                clusterNameSelector:
                  matchControllerRef: true
              writeConnectionSecretToRef:
                name: {{ .observed.composite.resource.metadata.uid }}-kubeconfig
                namespace: {{ .observed.composite.resource.spec.writeConnectionSecretToRef.namespace | default "crossplane-system" }}
            
            ---
            # In-cluster Kubernetes ProviderConfig
            apiVersion: kubernetes.crossplane.io/v1alpha1
            kind: ProviderConfig
            metadata:
              name: eks-in-cluster
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: eks-k8s-provider
            spec:
              credentials:
                source: Secret
                secretRef:
                  namespace: {{ .observed.composite.resource.spec.writeConnectionSecretToRef.namespace | default "crossplane-system" }}
                  name:      {{ .observed.composite.resource.metadata.uid }}-kubeconfig
                  key:       kubeconfig
            
            ---
            # Test NGINX Deployment using eks-in-cluster
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: test-nginx
            spec:
              forProvider:
                manifest:
                  apiVersion: apps/v1
                  kind: Deployment
                  metadata:
                    name: test-nginx
                    namespace: default
                  spec:
                    replicas: 1
                    selector:
                      matchLabels:
                        app: nginx
                    template:
                      metadata:
                        labels:
                          app: nginx
                      spec:
                        containers:
                          - name: nginx
                            image: nginx:latest
              providerConfigRef:
                name: eks-in-cluster

    - step: auto-ready
      functionRef: 
        name: function-auto-ready