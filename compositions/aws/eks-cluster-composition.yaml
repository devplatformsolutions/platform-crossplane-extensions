apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: eks.aws.platform.example.org
  labels:
    provider: aws
spec:
  compositeTypeRef:
    apiVersion: aws.platform.example.org/v1alpha1
    kind: XEKSCluster
  resources:
    # VPC
    - name: vpc
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPC
        metadata:
          name: eks-vpc
          namespace: crossplane-system
        spec:
          forProvider:
            cidrBlock: 10.0.0.0/16
            enableDnsSupport: true
            enableDnsHostnames: true
            tags:
              Name: eks-vpc
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "eks-vpc-%s"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region

    # Internet Gateway
    - name: igw
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: InternetGateway
        metadata:
          name: eks-igw
          namespace: crossplane-system
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
          providerConfigRef:
            name: default

    # Public Subnet 1
    - name: publicsubnet1
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: Subnet
        metadata:
          name: eks-public-1
          namespace: crossplane-system
        spec:
          forProvider:
            cidrBlock: 10.0.1.0/24
            mapPublicIpOnLaunch: true
            availabilityZone: "us-west-2a"
            tags:
              Name: eks-public-1
              "kubernetes.io/role/elb": "1"
            vpcIdSelector:
              matchControllerRef: true
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region

    # Public Subnet 2
    - name: publicsubnet2
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: Subnet
        metadata:
          name: eks-public-2
          namespace: crossplane-system
        spec:
          forProvider:
            cidrBlock: 10.0.2.0/24
            mapPublicIpOnLaunch: true
            availabilityZone: "us-west-2b"
            tags:
              Name: eks-public-2
              "kubernetes.io/role/elb": "1"
            vpcIdSelector:
              matchControllerRef: true
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region

    # EKS Cluster Role
    - name: eksclusterrole
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: Role
        metadata:
          name: eks-cluster-role
          namespace: crossplane-system
        spec:
          forProvider:
            assumeRolePolicy: |
              {
                "Version": "2012-10-17",
                "Statement": [{
                  "Effect": "Allow",
                  "Principal": {"Service": "eks.amazonaws.com"},
                  "Action": "sts:AssumeRole"
                }]
              }
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "eks-cluster-role-%s"

    # Cluster Policy Attachments
    - name: eks-cluster-policy
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        metadata:
          name: eks-cluster-policy
          namespace: crossplane-system
        spec:
          forProvider:
            policyArn: "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
            roleSelector:
              matchControllerRef: true
          providerConfigRef:
            name: default

    - name: eks-service-policy
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        metadata:
          name: eks-service-policy
          namespace: crossplane-system
        spec:
          forProvider:
            policyArn: "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
            roleSelector:
              matchControllerRef: true
          providerConfigRef:
            name: default

    # EKS Cluster
    - name: ekscluster
      base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: Cluster
        metadata:
          name: eks-cluster
          namespace: crossplane-system
        spec:
          forProvider:
            roleArnSelector:
              matchControllerRef: true
            version: "1.28"
            vpcConfig:
              - endpointPrivateAccess: true
                endpointPublicAccess: true
                subnetSelector:
                  matchControllerRef: true
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.clusterVersion
          toFieldPath: spec.forProvider.version

    # Node Group Role
    - name: eksnodegrouprole
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: Role
        metadata:
          name: eks-node-group-role
          namespace: crossplane-system
        spec:
          forProvider:
            assumeRolePolicy: |
              {
                "Version": "2012-10-17",
                "Statement": [{
                  "Effect": "Allow",
                  "Principal": {"Service": "ec2.amazonaws.com"},
                  "Action": "sts:AssumeRole"
                }]
              }
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "eks-node-role-%s"

    # Node Group Policy Attachments
    - name: node-worker-policy
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        metadata:
          name: node-worker-policy
          namespace: crossplane-system
        spec:
          forProvider:
            policyArn: "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
            roleSelector:
              matchControllerRef: true
          providerConfigRef:
            name: default

    - name: node-cni-policy
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        metadata:
          name: node-cni-policy
          namespace: crossplane-system
        spec:
          forProvider:
            policyArn: "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
            roleSelector:
              matchControllerRef: true
          providerConfigRef:
            name: default

    - name: node-ecr-policy
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        metadata:
          name: node-ecr-policy
          namespace: crossplane-system
        spec:
          forProvider:
            policyArn: "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
            roleSelector:
              matchControllerRef: true
          providerConfigRef:
            name: default

    # EKS Node Group
    - name: eksnodegroup
      base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: NodeGroup
        metadata:
          name: eks-node-group
          namespace: crossplane-system
        spec:
          forProvider:
            clusterNameSelector:
              matchControllerRef: true
            nodeRoleArnSelector:
              matchControllerRef: true
            subnetRefs:
              - name: publicsubnet1
              - name: publicsubnet2
            scalingConfig:
              - desiredSize: 2
                maxSize: 4
                minSize: 1
            instanceTypes: ["t3.medium"]
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.nodeCount
          toFieldPath: spec.forProvider.scalingConfig[0].desiredSize
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.nodeSize
          toFieldPath: spec.forProvider.instanceTypes[0]